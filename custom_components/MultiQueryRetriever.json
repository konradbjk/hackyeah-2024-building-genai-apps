{"data":{"edges":[],"nodes":[{"data":{"type":"MultiQueryRetriever","node":{"template":{"_type":"Component","llm":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"llm","value":"","display_name":"LLM","advanced":false,"input_types":["LanguageModel"],"dynamic":false,"info":"LLM to be passed as input.","title_case":false,"type":"other","_input_type":"HandleInput"},"retriever":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"retriever","value":"","display_name":"Retriever","advanced":false,"input_types":["Retriever"],"dynamic":false,"info":"","title_case":false,"type":"other","_input_type":"HandleInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional, List\n\nfrom langchain.retrievers.multi_query import MultiQueryRetriever\n\nfrom langflow.custom import Component\n\nfrom langflow.inputs import HandleInput, MessageTextInput, MultilineInput\n\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom langflow.helpers.data import docs_to_data\n\n\nfrom langchain_core.output_parsers import BaseOutputParser\nfrom pydantic import BaseModel, Field\nfrom langchain_core.prompts import PromptTemplate\n\n\n\nclass MultiQueryRetrieverComponent(Component):\n    display_name = \"MultiQueryRetriever\"\n    description = \"Initialize from llm using default template.\"\n    documentation = \"https://python.langchain.com/docs/how_to/MultiQueryRetriever/\"\n    name = \"MultiQueryRetriever\"\n    \n    inputs = [\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Query\",\n            info=\"Query to be passed as input.\",\n            input_types=[\"Message\", \"Text\"],\n        ),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"LLM\",\n            info=\"LLM to be passed as input.\",\n            input_types=[\"LanguageModel\"],\n        ),\n        HandleInput(name=\"retriever\", display_name=\"Retriever\", input_types=[\"Retriever\"]),\n    ]\n    \n    outputs = [\n        Output(display_name=\"Retrieved Documents\", name=\"documents\", method=\"retrieve_documents\"),\n    ]\n    \n\n    def retrieve_documents(self) -> List[Data]:\n        QUERY_PROMPT = PromptTemplate(\n            input_variables=[\"question\"],\n            template=\"\"\"You are an AI language model assistant. Your task is to generate five \n            different versions of the given user question to retrieve relevant documents from a vector \n            database. By generating multiple perspectives on the user question, your goal is to help\n            the user overcome some of the limitations of the distance-based similarity search. \n            Provide these alternative questions separated by newlines.\n            Original question: {question}\"\"\",\n        )\n        retriever = MultiQueryRetriever.from_llm(\n            retriever=self.retriever, llm=self.llm, prompt=QUERY_PROMPT, include_original=True, parser_key=\"lines\"\n        )  # \"lines\" is the key (attribute name) of the parsed output\n        \n        if self.search_query and isinstance(self.search_query, str) and self.search_query.strip():\n            unique_docs = retriever.invoke(self.search_query)\n            data = docs_to_data(unique_docs)\n            self.status = data\n            \n            return data\n            \n        else:\n            return []\n    \n\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"search_query":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"search_query","value":"","display_name":"Query","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"Query to be passed as input.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Initialize from llm using default template.","base_classes":["Data"],"display_name":"MultiQueryRetriever","documentation":"https://python.langchain.com/docs/how_to/MultiQueryRetriever/","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"documents","display_name":"Retrieved Documents","method":"retrieve_documents","value":"__UNDEFINED__","cache":true}],"field_order":["search_query","llm","retriever"],"beta":false,"edited":true,"official":false},"id":"MultiQueryRetriever-Jz9Mf"},"id":"MultiQueryRetriever-Jz9Mf","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"description":"Initialize from llm using default template.","name":"MultiQueryRetriever","id":"MultiQueryRetriever-Jz9Mf","is_component":true,"last_tested_version":"1.0.18"}